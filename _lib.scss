// https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: "", $special: false) {
  $indexOffset: if($special, -1, 0);
  $index: str-index($string, $search);
  @if $index {
    $index: $index + $indexOffset;
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }
  @return $string;
}
//
// svg-url
// Encode SVG XML into as CSS-friendly format
// (requires str-replace, above)
//
// Usage, on content or background-image:
//   content: svg-url(
//     '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"
//      xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
//      width="100%" viewBox="0 0 160 160">
//       <circle cx="80" cy="80" r="80" fill="red" />
//     </svg>'
//   );
//
// Works for EITHER LF line endings or CR LF (Macintosh CR is a lost cause, sorry)
// If people have problems, recommend updating node-sass (^v4), using LF EOLs,
// or failing that, just remove all linebreaks in the svg.
//
@function svg-url($svg) {
  // Chunk up string in order to avoid "stack level too deep" error
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    // Replace various things so as to encode SVG XML for CSS
    $chunk: str-replace($chunk, '"', "'");
    $chunk: str-replace($chunk, "%", "%25");
    $chunk: str-replace($chunk, "#", "%23");
    $chunk: str-replace($chunk, "{", "%7B");
    $chunk: str-replace($chunk, "}", "%7D");
    $chunk: str-replace($chunk, "<", "%3C");
    $chunk: str-replace($chunk, ">", "%3E");
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  // Minify all whitespace to a max of one character (HTML style)
  @while (str-index($encoded, "  ") != null) {
    $index: str-index($encoded, "  ");
    $encoded: "#{str-slice($encoded, 0, $index - 1)} #{str-slice($encoded, $index + 2)}";
  }
  @return url("data:image/svg+xml,#{$encoded}");
}
